<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>phase</name>
          <description>choose which phase you want to deploy</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Local</string>
              <string>Dev</string>
              <string>Stag</string>
              <string>Prod</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition plugin="extensible-choice-parameter@1.4.0">
          <name>version</name>
          <description>choose which version you want to deploy
 keep none when release build</description>
          <editable>true</editable>
          <choiceListProvider class="jp.ikedam.jenkins.plugins.extensible_choice_parameter.SystemGroovyChoiceListProvider">
            <groovyScript plugin="script-security@1.30">
              <script>File f = new File(&apos;/var/jenkins_home/version/marvel/iron_man/version&apos;)

if(f.exists() &amp;&amp; !f.isDirectory()) {
  String fileContents = new File(&apos;/var/jenkins_home/version/marvel/iron_man/version&apos;).text
  def list = Eval.me(fileContents)
  return list
}
else {
  return [&apos;none&apos;]
}</script>
              <sandbox>true</sandbox>
              <classpath/>
            </groovyScript>
            <defaultChoice>none</defaultChoice>
            <usePredefinedVariables>false</usePredefinedVariables>
          </choiceListProvider>
        </jp.ikedam.jenkins.plugins.extensible__choice__parameter.ExtensibleChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.38">
    <script>@Library(&apos;pipeline-lib&apos;) _

// load share variable
def build_info = build_info.load()

// define pipeline global variable
def job_info = [:]

job_info[&apos;folder&apos;] = &apos;marvel&apos;
job_info[&apos;name&apos;] = env.JOB_BASE_NAME
job_info[&apos;repo_host&apos;] = build_info[&apos;github&apos;][&apos;host&apos;]
job_info[&apos;repo_owner&apos;] = build_info[&apos;github&apos;][&apos;owner&apos;]
job_info[&apos;repo_name&apos;] = &apos;coscup_2017_sample_app&apos;
job_info[&apos;version_info&apos;] = [:]
job_info[&apos;version_info&apos;][&apos;app_tag_prefix&apos;] = &apos;iron_man&apos;
job_info[&apos;trigger_user&apos;] = &apos;&apos;
job_info[&apos;workspace&apos;] = &apos;&apos;
job_info[&apos;k8s&apos;] = [:]
job_info[&apos;k8s&apos;][&apos;headless&apos;] = &apos;false&apos;
job_info[&apos;k8s&apos;][&apos;autoscaling&apos;] = &apos;false&apos;

pipeline {

  agent any

  stages {
    stage(&apos;Build&apos;) {
      when { expression { version == &apos;none&apos; } }

      steps {
        script { 
          job_info[&apos;workspace&apos;] = pwd()
          job_info[&apos;trigger_user&apos;] = triggerUser()
          app_tag = new Date().format( &apos;yyyyMMddHHmmss&apos; )
        }

        deleteDir()
        
        // retrieve code from git
        checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &apos;RelativeTargetDirectory&apos;, relativeTargetDir: &quot;${job_info[&apos;folder&apos;]}_${job_info[&apos;name&apos;]}&quot;]], submoduleCfg: [], userRemoteConfigs: [[url: &quot;https://${job_info[&apos;repo_host&apos;]}/${job_info[&apos;repo_owner&apos;]}/${job_info[&apos;repo_name&apos;]}.git&quot;]]])

         // build docker images
        dir(&quot;${env.JENKINS_HOME}/packer-repo&quot;) {
          sh &quot;&quot;&quot;
            sudo -E bash -c \&quot;PACKER_TMP_DIR=/tmp packer build -var-file=variables/${job_info[&apos;folder&apos;]}/${job_info[&apos;name&apos;]}.json -var &apos;job_folder=${job_info[&apos;folder&apos;]}&apos; -var &apos;job_name=${job_info[&apos;name&apos;]}&apos; -var &apos;app_tag=${job_info[&apos;version_info&apos;][&apos;app_tag_prefix&apos;]}_${app_tag}&apos; -var &apos;workspace=${job_info[&apos;workspace&apos;]}&apos; templates/${job_info[&apos;folder&apos;]}/${job_info[&apos;name&apos;]}.json\&quot;
          &quot;&quot;&quot;
        }
      }
    }

    stage(&apos;Deploy&apos;) {
      when { expression { version != &apos;none&apos; } }

      steps {
        script {
          job_info[&apos;workspace&apos;] = pwd()
          job_info[&apos;trigger_user&apos;] = triggerUser()
        }

        dir(&quot;${env.JENKINS_HOME}/ansible-repo&quot;) {
          echo &apos;later&apos;
          //sh &quot;ansible-playbook -i \&quot;localhost,\&quot; -c local --extra-vars \&quot;region=us-west-2 phase=${phase} deploy_project=${job_info[&apos;folder&apos;]} deploy_module=${job_info[&apos;name&apos;]} headless=${job_info[&apos;k8s&apos;][&apos;headless&apos;]} autoscaling=${job_info[&apos;k8s&apos;][&apos;autoscaling&apos;]} app_tag=${version}\&quot; playbooks/common/deploy_kubernetes.yml&quot;
        }
      }
    }

    //stage(&apos;Save_Build_Number&apos;) {
    //  when { expression { version == &apos;none&apos; } }

    //  steps {
    //    sh &quot;mkdir -p ${env.JENKINS_HOME}/version/${job_info[&apos;folder&apos;]}/${job_info[&apos;name&apos;]}&quot;
    //    script {
    //      def version_list_string = &apos;[\\\&apos;&apos; + job_info[&apos;version_info&apos;][&apos;version_list&apos;].join(&apos;\\\&apos;, \\\&apos;&apos;) + &apos;\\\&apos;]&apos;
    //      sh &quot;echo ${version_list_string} &gt; ${env.JENKINS_HOME}/version/${job_info[&apos;folder&apos;]}/${job_info[&apos;name&apos;]}/version&quot;
    //    }
    //  }
    //}
  }

  post {
    success {
      script {
        if ( version != &apos;none&apos; ) {
          //deployNotify(phase, version, job_info[&apos;trigger_user&apos;], job_info[&apos;repo_branch&apos;], &apos;Success&apos;, job_info[&apos;region&apos;], job_info[&apos;repo_name&apos;])
        }
        else {
          //buildNotify(job_info[&apos;version_info&apos;][&apos;build_number&apos;], job_info[&apos;trigger_user&apos;])
        }
      }
    }

    failure {
      script {
        if ( version != &apos;none&apos; ) {
           //deployNotify(phase, version, job_info[&apos;trigger_user&apos;], job_info[&apos;repo_branch&apos;], &apos;Fail&apos;, job_info[&apos;region&apos;], job_info[&apos;repo_name&apos;])
        }
        else {
          //buildNotify(job_info[&apos;version_info&apos;][&apos;build_number&apos;], job_info[&apos;trigger_user&apos;], &apos;Fail&apos;)
        }
      }
    }
  }
}

</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>